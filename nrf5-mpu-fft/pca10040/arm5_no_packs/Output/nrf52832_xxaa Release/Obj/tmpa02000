	.syntax unified
	.cpu cortex-m4
	.eabi_attribute 27, 1
	.eabi_attribute 28, 1
	.fpu fpv4-sp-d16
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 1
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.thumb
	.file	"SEGGER_RTT.c"
	.text
.Ltext0:
	.section	.text._GetAvailWriteSpace,"ax",%progbits
	.align	2
	.thumb
	.thumb_func
	.type	_GetAvailWriteSpace, %function
_GetAvailWriteSpace:
.LFB4:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	ldr	r2, [r0, #16]
	ldr	r3, [r0, #12]
	cmp	r2, r3
	ittte	ls
	ldrls	r0, [r0, #8]
	addls	r0, r0, r2
	addls	r0, r0, #-1
	addhi	r0, r2, #-1
	subs	r0, r0, r3
	bx	lr
.LFE4:
	.size	_GetAvailWriteSpace, .-_GetAvailWriteSpace
	.section	.text._WriteNoCheck,"ax",%progbits
	.align	2
	.thumb
	.thumb_func
	.type	_WriteNoCheck, %function
_WriteNoCheck:
.LFB2:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, lr}
.LCFI0:
	mov	r5, r0
	mov	r8, r1
	mov	r6, r2
	ldr	r7, [r0, #12]
	ldr	r4, [r0, #8]
	subs	r4, r4, r7
	cmp	r4, r2
	bls	.L5
	ldr	r0, [r0, #4]
	add	r0, r0, r7
	bl	memcpy
	add	r6, r6, r7
	str	r6, [r5, #12]
	pop	{r4, r5, r6, r7, r8, pc}
.L5:
	ldr	r0, [r0, #4]
	add	r0, r0, r7
	mov	r2, r4
	bl	memcpy
	subs	r6, r6, r4
	ldr	r0, [r5, #4]
	add	r1, r8, r4
	mov	r2, r6
	bl	memcpy
	str	r6, [r5, #12]
	pop	{r4, r5, r6, r7, r8, pc}
.LFE2:
	.size	_WriteNoCheck, .-_WriteNoCheck
	.section	.text._WriteBlocking,"ax",%progbits
	.align	2
	.thumb
	.thumb_func
	.type	_WriteBlocking, %function
_WriteBlocking:
.LFB1:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, r8, r9, lr}
.LCFI1:
	mov	r6, r0
	mov	r8, r1
	mov	r7, r2
	ldr	r5, [r0, #12]
	mov	r9, #0
.L12:
	ldr	r4, [r6, #16]
	cmp	r5, r4
	itt	cs
	ldrcs	r2, [r6, #8]
	addcs	r4, r4, r2
	subs	r4, r4, #1
	subs	r3, r4, r5
	ldr	r4, [r6, #8]
	subs	r4, r4, r5
	cmp	r4, r7
	it	cs
	movcs	r4, r7
	cmp	r4, r3
	it	cs
	movcs	r4, r3
	ldr	r0, [r6, #4]
	add	r0, r0, r5
	mov	r1, r8
	mov	r2, r4
	bl	memcpy
	add	r9, r9, r4
	add	r8, r8, r4
	add	r5, r5, r4
	ldr	r3, [r6, #8]
	cmp	r3, r5
	it	eq
	moveq	r5, #0
	str	r5, [r6, #12]
	subs	r7, r7, r4
	bne	.L12
	mov	r0, r9
	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
.LFE1:
	.size	_WriteBlocking, .-_WriteBlocking
	.section	.text._PostTerminalSwitch,"ax",%progbits
	.align	2
	.thumb
	.thumb_func
	.type	_PostTerminalSwitch, %function
_PostTerminalSwitch:
.LFB3:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{lr}
.LCFI2:
	sub	sp, sp, #12
.LCFI3:
	movs	r3, #255
	strb	r3, [sp, #4]
	cmp	r1, #9
	ite	ls
	addls	r1, r1, #48
	addhi	r1, r1, #55
	strb	r1, [sp, #5]
	add	r1, sp, #4
	movs	r2, #2
	bl	_WriteBlocking
	add	sp, sp, #12
.LCFI4:
	@ sp needed
	ldr	pc, [sp], #4
.LFE3:
	.size	_PostTerminalSwitch, .-_PostTerminalSwitch
	.section	.text._DoInit,"ax",%progbits
	.align	2
	.thumb
	.thumb_func
	.type	_DoInit, %function
_DoInit:
.LFB0:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
.LCFI5:
	ldr	r4, .L21
	movs	r3, #2
	str	r3, [r4, #16]
	str	r3, [r4, #20]
	ldr	r2, .L21+4
	str	r2, [r4, #24]
	ldr	r3, .L21+8
	str	r3, [r4, #28]
	mov	r3, #1024
	str	r3, [r4, #32]
	movs	r3, #0
	str	r3, [r4, #40]
	str	r3, [r4, #36]
	str	r3, [r4, #44]
	str	r2, [r4, #72]
	ldr	r2, .L21+12
	str	r2, [r4, #76]
	movs	r2, #16
	str	r2, [r4, #80]
	str	r3, [r4, #88]
	str	r3, [r4, #84]
	str	r3, [r4, #92]
	adds	r0, r4, #7
	ldr	r1, .L21+16
	bl	strcpy
	mov	r0, r4
	ldr	r1, .L21+20
	bl	strcpy
	movs	r3, #32
	strb	r3, [r4, #6]
	pop	{r4, pc}
.L22:
	.align	2
.L21:
	.word	.LANCHOR0
	.word	.LC0
	.word	.LANCHOR1
	.word	.LANCHOR2
	.word	.LC1
	.word	.LC2
.LFE0:
	.size	_DoInit, .-_DoInit
	.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_ReadNoLock
	.thumb
	.thumb_func
	.type	SEGGER_RTT_ReadNoLock, %function
SEGGER_RTT_ReadNoLock:
.LFB5:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, r7, r8, r9, r10, lr}
.LCFI6:
	mov	r5, r0
	mov	r7, r1
	mov	r8, r2
	ldr	r3, .L33
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L24
	bl	_DoInit
.L24:
	add	r3, r5, r5, lsl #1
	ldr	r1, .L33
	add	r3, r1, r3, lsl #3
	ldr	r6, [r3, #88]
	ldr	r4, [r3, #84]
	cmp	r6, r4
	bls	.L25
	add	r10, r5, r5, lsl #1
	add	r10, r1, r10, lsl #3
	ldr	r3, [r10, #80]
	rsb	r9, r6, r3
	cmp	r9, r8
	it	cs
	movcs	r9, r8
	ldr	r1, [r10, #76]
	mov	r0, r7
	add	r1, r1, r6
	mov	r2, r9
	bl	memcpy
	add	r7, r7, r9
	rsb	r8, r9, r8
	add	r6, r6, r9
	ldr	r3, [r10, #80]
	cmp	r3, r6
	it	eq
	moveq	r6, #0
	subs	r4, r4, r6
	cmp	r4, r8
	it	cs
	movcs	r4, r8
	cbz	r4, .L27
	b	.L29
.L30:
	mov	r9, #0
.L29:
	add	r3, r5, r5, lsl #1
	ldr	r2, .L33
	add	r3, r2, r3, lsl #3
	ldr	r1, [r3, #76]
	mov	r0, r7
	add	r1, r1, r6
	mov	r2, r4
	bl	memcpy
	add	r9, r9, r4
	add	r6, r6, r4
.L27:
	cmp	r9, #0
	beq	.L31
	add	r5, r5, r5, lsl #1
	ldr	r3, .L33
	add	r5, r3, r5, lsl #3
	str	r6, [r5, #88]
	b	.L31
.L25:
	subs	r4, r4, r6
	cmp	r4, r8
	it	cs
	movcs	r4, r8
	cmp	r4, #0
	bne	.L30
	mov	r9, #0
.L31:
	mov	r0, r9
	pop	{r4, r5, r6, r7, r8, r9, r10, pc}
.L34:
	.align	2
.L33:
	.word	.LANCHOR0
.LFE5:
	.size	SEGGER_RTT_ReadNoLock, .-SEGGER_RTT_ReadNoLock
	.section	.text.SEGGER_RTT_Read,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_Read
	.thumb
	.thumb_func
	.type	SEGGER_RTT_Read, %function
SEGGER_RTT_Read:
.LFB6:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, lr}
.LCFI7:
	bl	SEGGER_RTT_ReadNoLock
	pop	{r3, pc}
.LFE6:
	.size	SEGGER_RTT_Read, .-SEGGER_RTT_Read
	.section	.text.SEGGER_RTT_WriteSkipNoLock,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_WriteSkipNoLock
	.thumb
	.thumb_func
	.type	SEGGER_RTT_WriteSkipNoLock, %function
SEGGER_RTT_WriteSkipNoLock:
.LFB7:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
.LCFI8:
	mov	r4, r0
	mov	r6, r1
	mov	r5, r2
	add	r2, r0, r0, lsl #1
	ldr	r3, .L45
	add	r3, r3, r2, lsl #3
	ldr	r1, [r3, #40]
	ldr	r7, [r3, #36]
	cmp	r1, r7
	bhi	.L38
	mov	r3, r2
	ldr	r2, .L45
	add	r3, r2, r3, lsl #3
	ldr	r3, [r3, #32]
	rsb	r8, r7, r3
	add	r3, r8, #-1
	cmp	r3, r5
	bcc	.L39
	mov	r8, r2
	adds	r3, r0, #1
	add	r3, r3, r3, lsl #1
	add	r3, r2, r3, lsl #3
	ldr	r0, [r3, #4]
	add	r0, r0, r7
	mov	r1, r6
	mov	r2, r5
	bl	memcpy
	add	r5, r5, r7
	add	r4, r4, r4, lsl #1
	add	r8, r8, r4, lsl #3
	str	r5, [r8, #36]
	movs	r0, #1
	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L39:
	add	r1, r1, r3
	cmp	r5, r1
	bhi	.L42
	cmp	r8, r5
	bls	.L41
	ldr	r8, .L45
	adds	r3, r0, #1
	add	r3, r3, r3, lsl #1
	add	r3, r8, r3, lsl #3
	ldr	r0, [r3, #4]
	add	r0, r0, r7
	mov	r1, r6
	mov	r2, r5
	bl	memcpy
	add	r5, r5, r7
	add	r4, r4, r4, lsl #1
	add	r8, r8, r4, lsl #3
	str	r5, [r8, #36]
	movs	r0, #1
	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L41:
	ldr	r9, .L45
	add	r10, r0, #1
	lsl	fp, r10, #1
	add	r3, fp, r10
	add	r3, r9, r3, lsl #3
	ldr	r0, [r3, #4]
	add	r0, r0, r7
	mov	r1, r6
	mov	r2, r8
	bl	memcpy
	rsb	r5, r8, r5
	add	r10, r10, fp
	add	r10, r9, r10, lsl #3
	ldr	r0, [r10, #4]
	add	r1, r6, r8
	mov	r2, r5
	bl	memcpy
	add	r4, r4, r4, lsl #1
	add	r9, r9, r4, lsl #3
	str	r5, [r9, #36]
	movs	r0, #1
	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L38:
	subs	r1, r1, #1
	subs	r1, r1, r7
	cmp	r5, r1
	bhi	.L43
	ldr	r8, .L45
	adds	r3, r0, #1
	add	r3, r3, r3, lsl #1
	add	r3, r8, r3, lsl #3
	ldr	r0, [r3, #4]
	add	r0, r0, r7
	mov	r1, r6
	mov	r2, r5
	bl	memcpy
	add	r5, r5, r7
	add	r4, r4, r4, lsl #1
	add	r4, r8, r4, lsl #3
	str	r5, [r4, #36]
	movs	r0, #1
	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L42:
	movs	r0, #0
	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L43:
	movs	r0, #0
	pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
.L46:
	.align	2
.L45:
	.word	.LANCHOR0
.LFE7:
	.size	SEGGER_RTT_WriteSkipNoLock, .-SEGGER_RTT_WriteSkipNoLock
	.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_WriteNoLock
	.thumb
	.thumb_func
	.type	SEGGER_RTT_WriteNoLock, %function
SEGGER_RTT_WriteNoLock:
.LFB8:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
.LCFI9:
	mov	r6, r1
	mov	r5, r2
	ldr	r2, .L56
	adds	r3, r0, #1
	add	r3, r3, r3, lsl #1
	add	r4, r2, r3, lsl #3
	add	r0, r0, r0, lsl #1
	add	r0, r2, r0, lsl #3
	ldr	r3, [r0, #44]
	cmp	r3, #1
	beq	.L49
	cbz	r3, .L50
	cmp	r3, #2
	beq	.L51
	b	.L54
.L50:
	mov	r0, r4
	bl	_GetAvailWriteSpace
	cmp	r0, r5
	bcc	.L53
	mov	r0, r4
	mov	r1, r6
	mov	r2, r5
	bl	_WriteNoCheck
	b	.L48
.L49:
	mov	r0, r4
	bl	_GetAvailWriteSpace
	cmp	r5, r0
	it	cs
	movcs	r5, r0
	mov	r0, r4
	mov	r1, r6
	mov	r2, r5
	bl	_WriteNoCheck
	b	.L48
.L51:
	mov	r0, r4
	mov	r2, r5
	bl	_WriteBlocking
	mov	r5, r0
	b	.L48
.L54:
	movs	r5, #0
	b	.L48
.L53:
	movs	r5, #0
.L48:
	mov	r0, r5
	pop	{r4, r5, r6, pc}
.L57:
	.align	2
.L56:
	.word	.LANCHOR0
.LFE8:
	.size	SEGGER_RTT_WriteNoLock, .-SEGGER_RTT_WriteNoLock
	.section	.text.SEGGER_RTT_Write,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_Write
	.thumb
	.thumb_func
	.type	SEGGER_RTT_Write, %function
SEGGER_RTT_Write:
.LFB9:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, r5, r6, lr}
.LCFI10:
	mov	r6, r0
	mov	r5, r1
	mov	r4, r2
	ldr	r3, .L61
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L59
	bl	_DoInit
.L59:
	mov	r0, r6
	mov	r1, r5
	mov	r2, r4
	bl	SEGGER_RTT_WriteNoLock
	pop	{r4, r5, r6, pc}
.L62:
	.align	2
.L61:
	.word	.LANCHOR0
.LFE9:
	.size	SEGGER_RTT_Write, .-SEGGER_RTT_Write
	.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_WriteString
	.thumb
	.thumb_func
	.type	SEGGER_RTT_WriteString, %function
SEGGER_RTT_WriteString:
.LFB10:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
.LCFI11:
	mov	r5, r0
	mov	r4, r1
	mov	r0, r1
	bl	strlen
	mov	r2, r0
	mov	r0, r5
	mov	r1, r4
	bl	SEGGER_RTT_Write
	pop	{r3, r4, r5, pc}
.LFE10:
	.size	SEGGER_RTT_WriteString, .-SEGGER_RTT_WriteString
	.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_GetKey
	.thumb
	.thumb_func
	.type	SEGGER_RTT_GetKey, %function
SEGGER_RTT_GetKey:
.LFB11:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{lr}
.LCFI12:
	sub	sp, sp, #12
.LCFI13:
.LBB4:
.LBB5:
	movs	r0, #0
	add	r1, sp, #7
	movs	r2, #1
	bl	SEGGER_RTT_ReadNoLock
.LBE5:
.LBE4:
	cmp	r0, #1
	ite	eq
	ldrbeq	r0, [sp, #7]	@ zero_extendqisi2
	movne	r0, #-1
	add	sp, sp, #12
.LCFI14:
	@ sp needed
	ldr	pc, [sp], #4
.LFE11:
	.size	SEGGER_RTT_GetKey, .-SEGGER_RTT_GetKey
	.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_WaitKey
	.thumb
	.thumb_func
	.type	SEGGER_RTT_WaitKey, %function
SEGGER_RTT_WaitKey:
.LFB12:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, lr}
.LCFI15:
.L70:
	bl	SEGGER_RTT_GetKey
	cmp	r0, #0
	blt	.L70
	pop	{r3, pc}
.LFE12:
	.size	SEGGER_RTT_WaitKey, .-SEGGER_RTT_WaitKey
	.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_HasKey
	.thumb
	.thumb_func
	.type	SEGGER_RTT_HasKey, %function
SEGGER_RTT_HasKey:
.LFB13:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, lr}
.LCFI16:
	ldr	r3, .L76
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L74
	bl	_DoInit
.L74:
	ldr	r3, .L76
	ldr	r0, [r3, #88]
	ldr	r3, [r3, #84]
	subs	r0, r0, r3
	it	ne
	movne	r0, #1
	pop	{r3, pc}
.L77:
	.align	2
.L76:
	.word	.LANCHOR0
.LFE13:
	.size	SEGGER_RTT_HasKey, .-SEGGER_RTT_HasKey
	.section	.text.SEGGER_RTT_HasData,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_HasData
	.thumb
	.thumb_func
	.type	SEGGER_RTT_HasData, %function
SEGGER_RTT_HasData:
.LFB14:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	@ link register save eliminated.
	push	{r4}
.LCFI17:
	ldr	r2, .L80
	lsls	r1, r0, #1
	adds	r3, r1, r0
	add	r3, r2, r3, lsl #3
	ldr	r4, [r3, #84]
	add	r0, r0, r1
	add	r0, r2, r0, lsl #3
	ldr	r0, [r0, #88]
	subs	r0, r4, r0
	ldr	r4, [sp], #4
.LCFI18:
	bx	lr
.L81:
	.align	2
.L80:
	.word	.LANCHOR0
.LFE14:
	.size	SEGGER_RTT_HasData, .-SEGGER_RTT_HasData
	.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_ConfigUpBuffer
	.thumb
	.thumb_func
	.type	SEGGER_RTT_ConfigUpBuffer, %function
SEGGER_RTT_ConfigUpBuffer:
.LFB15:
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}
.LCFI19:
	mov	r4, r0
	mov	r7, r1
	mov	r6, r2
	mov	r5, r3
	ldr	r3, .L88
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L83
	bl	_DoInit
.L83:
	ldr	r3, .L88
	ldr	r3, [r3, #16]
	cmp	r3, r4
	bls	.L86
	cbz	r4, .L85
	ldr	r3, .L88
	adds	r2, r4, #1
	lsls	r1, r2, #1
	adds	r0, r1, r2
	str	r7, [r3, r0, lsl #3]
	add	r2, r3, r0, lsl #3
	str	r6, [r2, #4]
	add	r2, r4, r4, lsl #1
	add	r3, r3, r2, lsl #3
	str	r5, [r3, #32]
	movs	r2, #0
	str	r2, [r3, #40]
	str	r2, [r3, #36]
.L85:
	add	r4, r4, r4, lsl #1
	ldr	r3, .L88
	add	r4, r3, r4, lsl #3
	ldr	r3, [sp, #24]
	str	r3, [r4, #44]
	movs	r0, #0
	pop	{r3, r4, r5, r6, r7, pc}
.L86:
	mov	r0, #-1
	pop	{r3, r4, r5, r6, r7, pc}
.L89:
	.align	2
.L88:
	.word	.LANCHOR0
.LFE15:
	.size	SEGGER_RTT_ConfigUpBuffer, .-SEGGER_RTT_ConfigUpBuffer
	.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_ConfigDownBuffer
	.thumb
	.thumb_func
	.type	SEGGER_RTT_ConfigDownBuffer, %function
SEGGER_RTT_ConfigDownBuffer:
.LFB16:
	@ args = 4, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, lr}
.LCFI20:
	mov	r4, r0
	mov	r7, r1
	mov	r6, r2
	mov	r5, r3
	ldr	r3, .L96
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L91
	bl	_DoInit
.L91:
	ldr	r3, .L96
	ldr	r3, [r3, #20]
	cmp	r3, r4
	bls	.L94
	cbz	r4, .L93
	add	r3, r4, r4, lsl #1
	ldr	r2, .L96
	add	r3, r2, r3, lsl #3
	str	r7, [r3, #72]
	str	r6, [r3, #76]
	str	r5, [r3, #80]
	movs	r2, #0
	str	r2, [r3, #88]
	str	r2, [r3, #84]
.L93:
	add	r4, r4, r4, lsl #1
	ldr	r3, .L96
	add	r4, r3, r4, lsl #3
	ldr	r3, [sp, #24]
	str	r3, [r4, #92]
	movs	r0, #0
	pop	{r3, r4, r5, r6, r7, pc}
.L94:
	mov	r0, #-1
	pop	{r3, r4, r5, r6, r7, pc}
.L97:
	.align	2
.L96:
	.word	.LANCHOR0
.LFE16:
	.size	SEGGER_RTT_ConfigDownBuffer, .-SEGGER_RTT_ConfigDownBuffer
	.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_SetNameUpBuffer
	.thumb
	.thumb_func
	.type	SEGGER_RTT_SetNameUpBuffer, %function
SEGGER_RTT_SetNameUpBuffer:
.LFB17:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
.LCFI21:
	mov	r4, r0
	mov	r5, r1
	ldr	r3, .L103
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L99
	bl	_DoInit
.L99:
	ldr	r3, .L103
	ldr	r3, [r3, #16]
	cmp	r3, r4
	bls	.L101
	adds	r4, r4, #1
	add	r4, r4, r4, lsl #1
	ldr	r3, .L103
	str	r5, [r3, r4, lsl #3]
	movs	r0, #0
	pop	{r3, r4, r5, pc}
.L101:
	mov	r0, #-1
	pop	{r3, r4, r5, pc}
.L104:
	.align	2
.L103:
	.word	.LANCHOR0
.LFE17:
	.size	SEGGER_RTT_SetNameUpBuffer, .-SEGGER_RTT_SetNameUpBuffer
	.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_SetNameDownBuffer
	.thumb
	.thumb_func
	.type	SEGGER_RTT_SetNameDownBuffer, %function
SEGGER_RTT_SetNameDownBuffer:
.LFB18:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, lr}
.LCFI22:
	mov	r4, r0
	mov	r5, r1
	ldr	r3, .L110
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L106
	bl	_DoInit
.L106:
	ldr	r3, .L110
	ldr	r3, [r3, #20]
	cmp	r3, r4
	bls	.L108
	add	r4, r4, r4, lsl #1
	ldr	r3, .L110
	add	r4, r3, r4, lsl #3
	str	r5, [r4, #72]
	movs	r0, #0
	pop	{r3, r4, r5, pc}
.L108:
	mov	r0, #-1
	pop	{r3, r4, r5, pc}
.L111:
	.align	2
.L110:
	.word	.LANCHOR0
.LFE18:
	.size	SEGGER_RTT_SetNameDownBuffer, .-SEGGER_RTT_SetNameDownBuffer
	.section	.text.SEGGER_RTT_Init,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_Init
	.thumb
	.thumb_func
	.type	SEGGER_RTT_Init, %function
SEGGER_RTT_Init:
.LFB19:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, lr}
.LCFI23:
	ldr	r3, .L115
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L112
	bl	_DoInit
.L112:
	pop	{r3, pc}
.L116:
	.align	2
.L115:
	.word	.LANCHOR0
.LFE19:
	.size	SEGGER_RTT_Init, .-SEGGER_RTT_Init
	.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_SetTerminal
	.thumb
	.thumb_func
	.type	SEGGER_RTT_SetTerminal, %function
SEGGER_RTT_SetTerminal:
.LFB20:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r4, lr}
.LCFI24:
	sub	sp, sp, #8
.LCFI25:
	mov	r4, r0
	ldr	r3, .L123
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L118
	bl	_DoInit
.L118:
	movs	r3, #255
	strb	r3, [sp, #4]
	cmp	r4, #15
	bhi	.L117
	cmp	r4, #9
	ite	ls
	addls	r3, r4, #48
	addhi	r3, r4, #55
	strb	r3, [sp, #5]
	ldr	r3, .L123+4
	strb	r4, [r3]
	ldr	r0, .L123+8
	add	r1, sp, #4
	movs	r2, #2
	bl	_WriteBlocking
.L117:
	add	sp, sp, #8
.LCFI26:
	@ sp needed
	pop	{r4, pc}
.L124:
	.align	2
.L123:
	.word	.LANCHOR0
	.word	.LANCHOR3
	.word	.LANCHOR0+24
.LFE20:
	.size	SEGGER_RTT_SetTerminal, .-SEGGER_RTT_SetTerminal
	.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
	.align	2
	.global	SEGGER_RTT_TerminalOut
	.thumb
	.thumb_func
	.type	SEGGER_RTT_TerminalOut, %function
SEGGER_RTT_TerminalOut:
.LFB21:
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	push	{r3, r4, r5, r6, r7, r8, r9, lr}
.LCFI27:
	mov	r5, r0
	mov	r6, r1
	ldr	r3, .L137
	ldrb	r3, [r3]	@ zero_extendqisi2
	cbnz	r3, .L126
	bl	_DoInit
.L126:
	cmp	r5, #15
	bhi	.L131
	mov	r0, r6
	bl	strlen
	mov	r8, r0
	ldr	r4, .L137
	add	r0, r4, #24
	bl	_GetAvailWriteSpace
	mov	r7, r0
	ldr	r3, [r4, #44]
	and	r3, r3, #3
	cmp	r3, #1
	beq	.L128
	cbz	r3, .L129
	cmp	r3, #2
	beq	.L130
	b	.L135
.L129:
	add	r3, r8, #4
	cmp	r0, r3
	bcc	.L133
	ldr	r7, .L137+4
	mov	r0, r7
	mov	r1, r5
	bl	_PostTerminalSwitch
	mov	r0, r7
	mov	r1, r6
	mov	r2, r8
	bl	_WriteBlocking
	mov	r4, r0
	mov	r0, r7
	ldr	r3, .L137+8
	ldrb	r1, [r3]	@ zero_extendqisi2
	bl	_PostTerminalSwitch
	b	.L127
.L128:
	cmp	r0, #3
	bls	.L134
	ldr	r9, .L137+4
	mov	r0, r9
	mov	r1, r5
	bl	_PostTerminalSwitch
	subs	r2, r7, #4
	mov	r0, r9
	mov	r1, r6
	cmp	r2, r8
	it	cs
	movcs	r2, r8
	bl	_WriteBlocking
	mov	r4, r0
	mov	r0, r9
	ldr	r3, .L137+8
	ldrb	r1, [r3]	@ zero_extendqisi2
	bl	_PostTerminalSwitch
	b	.L127
.L130:
	ldr	r7, .L137+4
	mov	r0, r7
	mov	r1, r5
	bl	_PostTerminalSwitch
	mov	r0, r7
	mov	r1, r6
	mov	r2, r8
	bl	_WriteBlocking
	mov	r4, r0
	mov	r0, r7
	ldr	r3, .L137+8
	ldrb	r1, [r3]	@ zero_extendqisi2
	bl	_PostTerminalSwitch
	b	.L127
.L131:
	mov	r4, #-1
	b	.L127
.L135:
	mov	r4, #-1
	b	.L127
.L133:
	movs	r4, #0
	b	.L127
.L134:
	mov	r4, #-1
.L127:
	mov	r0, r4
	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
.L138:
	.align	2
.L137:
	.word	.LANCHOR0
	.word	.LANCHOR0+24
	.word	.LANCHOR3
.LFE21:
	.size	SEGGER_RTT_TerminalOut, .-SEGGER_RTT_TerminalOut
	.global	_SEGGER_RTT
	.section	.bss._ActiveTerminal,"aw",%nobits
	.set	.LANCHOR3,. + 0
	.type	_ActiveTerminal, %object
	.size	_ActiveTerminal, 1
_ActiveTerminal:
	.space	1
	.section	.rodata.str1.4,"aMS",%progbits,1
	.align	2
.LC0:
	.ascii	"Terminal\000"
	.space	3
.LC1:
	.ascii	"RTT\000"
.LC2:
	.ascii	"SEGGER\000"
	.section	.bss._acDownBuffer,"aw",%nobits
	.align	2
	.set	.LANCHOR2,. + 0
	.type	_acDownBuffer, %object
	.size	_acDownBuffer, 16
_acDownBuffer:
	.space	16
	.section	.bss._acUpBuffer,"aw",%nobits
	.align	2
	.set	.LANCHOR1,. + 0
	.type	_acUpBuffer, %object
	.size	_acUpBuffer, 1024
_acUpBuffer:
	.space	1024
	.section	.bss._SEGGER_RTT,"aw",%nobits
	.align	2
	.set	.LANCHOR0,. + 0
	.type	_SEGGER_RTT, %object
	.size	_SEGGER_RTT, 120
_SEGGER_RTT:
	.space	120
	.section	.debug_frame,"",%progbits
.Lframe0:
	.4byte	.LECIE0-.LSCIE0
.LSCIE0:
	.4byte	0xffffffff
	.byte	0x3
	.ascii	"\000"
	.uleb128 0x1
	.sleb128 -4
	.uleb128 0xe
	.byte	0xc
	.uleb128 0xd
	.uleb128 0
	.align	2
.LECIE0:
.LSFDE0:
	.4byte	.LEFDE0-.LASFDE0
.LASFDE0:
	.4byte	.Lframe0
	.4byte	.LFB4
	.4byte	.LFE4-.LFB4
	.align	2
.LEFDE0:
.LSFDE2:
	.4byte	.LEFDE2-.LASFDE2
.LASFDE2:
	.4byte	.Lframe0
	.4byte	.LFB2
	.4byte	.LFE2-.LFB2
	.byte	0x4
	.4byte	.LCFI0-.LFB2
	.byte	0xe
	.uleb128 0x18
	.byte	0x84
	.uleb128 0x6
	.byte	0x85
	.uleb128 0x5
	.byte	0x86
	.uleb128 0x4
	.byte	0x87
	.uleb128 0x3
	.byte	0x88
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE2:
.LSFDE4:
	.4byte	.LEFDE4-.LASFDE4
.LASFDE4:
	.4byte	.Lframe0
	.4byte	.LFB1
	.4byte	.LFE1-.LFB1
	.byte	0x4
	.4byte	.LCFI1-.LFB1
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x8
	.byte	0x84
	.uleb128 0x7
	.byte	0x85
	.uleb128 0x6
	.byte	0x86
	.uleb128 0x5
	.byte	0x87
	.uleb128 0x4
	.byte	0x88
	.uleb128 0x3
	.byte	0x89
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE4:
.LSFDE6:
	.4byte	.LEFDE6-.LASFDE6
.LASFDE6:
	.4byte	.Lframe0
	.4byte	.LFB3
	.4byte	.LFE3-.LFB3
	.byte	0x4
	.4byte	.LCFI2-.LFB3
	.byte	0xe
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x1
	.byte	0x4
	.4byte	.LCFI3-.LCFI2
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.4byte	.LCFI4-.LCFI3
	.byte	0xe
	.uleb128 0x4
	.align	2
.LEFDE6:
.LSFDE8:
	.4byte	.LEFDE8-.LASFDE8
.LASFDE8:
	.4byte	.Lframe0
	.4byte	.LFB0
	.4byte	.LFE0-.LFB0
	.byte	0x4
	.4byte	.LCFI5-.LFB0
	.byte	0xe
	.uleb128 0x8
	.byte	0x84
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE8:
.LSFDE10:
	.4byte	.LEFDE10-.LASFDE10
.LASFDE10:
	.4byte	.Lframe0
	.4byte	.LFB5
	.4byte	.LFE5-.LFB5
	.byte	0x4
	.4byte	.LCFI6-.LFB5
	.byte	0xe
	.uleb128 0x20
	.byte	0x84
	.uleb128 0x8
	.byte	0x85
	.uleb128 0x7
	.byte	0x86
	.uleb128 0x6
	.byte	0x87
	.uleb128 0x5
	.byte	0x88
	.uleb128 0x4
	.byte	0x89
	.uleb128 0x3
	.byte	0x8a
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE10:
.LSFDE12:
	.4byte	.LEFDE12-.LASFDE12
.LASFDE12:
	.4byte	.Lframe0
	.4byte	.LFB6
	.4byte	.LFE6-.LFB6
	.byte	0x4
	.4byte	.LCFI7-.LFB6
	.byte	0xe
	.uleb128 0x8
	.byte	0x83
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE12:
.LSFDE14:
	.4byte	.LEFDE14-.LASFDE14
.LASFDE14:
	.4byte	.Lframe0
	.4byte	.LFB7
	.4byte	.LFE7-.LFB7
	.byte	0x4
	.4byte	.LCFI8-.LFB7
	.byte	0xe
	.uleb128 0x28
	.byte	0x83
	.uleb128 0xa
	.byte	0x84
	.uleb128 0x9
	.byte	0x85
	.uleb128 0x8
	.byte	0x86
	.uleb128 0x7
	.byte	0x87
	.uleb128 0x6
	.byte	0x88
	.uleb128 0x5
	.byte	0x89
	.uleb128 0x4
	.byte	0x8a
	.uleb128 0x3
	.byte	0x8b
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE14:
.LSFDE16:
	.4byte	.LEFDE16-.LASFDE16
.LASFDE16:
	.4byte	.Lframe0
	.4byte	.LFB8
	.4byte	.LFE8-.LFB8
	.byte	0x4
	.4byte	.LCFI9-.LFB8
	.byte	0xe
	.uleb128 0x10
	.byte	0x84
	.uleb128 0x4
	.byte	0x85
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE16:
.LSFDE18:
	.4byte	.LEFDE18-.LASFDE18
.LASFDE18:
	.4byte	.Lframe0
	.4byte	.LFB9
	.4byte	.LFE9-.LFB9
	.byte	0x4
	.4byte	.LCFI10-.LFB9
	.byte	0xe
	.uleb128 0x10
	.byte	0x84
	.uleb128 0x4
	.byte	0x85
	.uleb128 0x3
	.byte	0x86
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE18:
.LSFDE20:
	.4byte	.LEFDE20-.LASFDE20
.LASFDE20:
	.4byte	.Lframe0
	.4byte	.LFB10
	.4byte	.LFE10-.LFB10
	.byte	0x4
	.4byte	.LCFI11-.LFB10
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x4
	.byte	0x84
	.uleb128 0x3
	.byte	0x85
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE20:
.LSFDE22:
	.4byte	.LEFDE22-.LASFDE22
.LASFDE22:
	.4byte	.Lframe0
	.4byte	.LFB11
	.4byte	.LFE11-.LFB11
	.byte	0x4
	.4byte	.LCFI12-.LFB11
	.byte	0xe
	.uleb128 0x4
	.byte	0x8e
	.uleb128 0x1
	.byte	0x4
	.4byte	.LCFI13-.LCFI12
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.4byte	.LCFI14-.LCFI13
	.byte	0xe
	.uleb128 0x4
	.align	2
.LEFDE22:
.LSFDE24:
	.4byte	.LEFDE24-.LASFDE24
.LASFDE24:
	.4byte	.Lframe0
	.4byte	.LFB12
	.4byte	.LFE12-.LFB12
	.byte	0x4
	.4byte	.LCFI15-.LFB12
	.byte	0xe
	.uleb128 0x8
	.byte	0x83
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE24:
.LSFDE26:
	.4byte	.LEFDE26-.LASFDE26
.LASFDE26:
	.4byte	.Lframe0
	.4byte	.LFB13
	.4byte	.LFE13-.LFB13
	.byte	0x4
	.4byte	.LCFI16-.LFB13
	.byte	0xe
	.uleb128 0x8
	.byte	0x83
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE26:
.LSFDE28:
	.4byte	.LEFDE28-.LASFDE28
.LASFDE28:
	.4byte	.Lframe0
	.4byte	.LFB14
	.4byte	.LFE14-.LFB14
	.byte	0x4
	.4byte	.LCFI17-.LFB14
	.byte	0xe
	.uleb128 0x4
	.byte	0x84
	.uleb128 0x1
	.byte	0x4
	.4byte	.LCFI18-.LCFI17
	.byte	0xc4
	.byte	0xe
	.uleb128 0
	.align	2
.LEFDE28:
.LSFDE30:
	.4byte	.LEFDE30-.LASFDE30
.LASFDE30:
	.4byte	.Lframe0
	.4byte	.LFB15
	.4byte	.LFE15-.LFB15
	.byte	0x4
	.4byte	.LCFI19-.LFB15
	.byte	0xe
	.uleb128 0x18
	.byte	0x83
	.uleb128 0x6
	.byte	0x84
	.uleb128 0x5
	.byte	0x85
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.byte	0x87
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE30:
.LSFDE32:
	.4byte	.LEFDE32-.LASFDE32
.LASFDE32:
	.4byte	.Lframe0
	.4byte	.LFB16
	.4byte	.LFE16-.LFB16
	.byte	0x4
	.4byte	.LCFI20-.LFB16
	.byte	0xe
	.uleb128 0x18
	.byte	0x83
	.uleb128 0x6
	.byte	0x84
	.uleb128 0x5
	.byte	0x85
	.uleb128 0x4
	.byte	0x86
	.uleb128 0x3
	.byte	0x87
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE32:
.LSFDE34:
	.4byte	.LEFDE34-.LASFDE34
.LASFDE34:
	.4byte	.Lframe0
	.4byte	.LFB17
	.4byte	.LFE17-.LFB17
	.byte	0x4
	.4byte	.LCFI21-.LFB17
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x4
	.byte	0x84
	.uleb128 0x3
	.byte	0x85
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE34:
.LSFDE36:
	.4byte	.LEFDE36-.LASFDE36
.LASFDE36:
	.4byte	.Lframe0
	.4byte	.LFB18
	.4byte	.LFE18-.LFB18
	.byte	0x4
	.4byte	.LCFI22-.LFB18
	.byte	0xe
	.uleb128 0x10
	.byte	0x83
	.uleb128 0x4
	.byte	0x84
	.uleb128 0x3
	.byte	0x85
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE36:
.LSFDE38:
	.4byte	.LEFDE38-.LASFDE38
.LASFDE38:
	.4byte	.Lframe0
	.4byte	.LFB19
	.4byte	.LFE19-.LFB19
	.byte	0x4
	.4byte	.LCFI23-.LFB19
	.byte	0xe
	.uleb128 0x8
	.byte	0x83
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE38:
.LSFDE40:
	.4byte	.LEFDE40-.LASFDE40
.LASFDE40:
	.4byte	.Lframe0
	.4byte	.LFB20
	.4byte	.LFE20-.LFB20
	.byte	0x4
	.4byte	.LCFI24-.LFB20
	.byte	0xe
	.uleb128 0x8
	.byte	0x84
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.byte	0x4
	.4byte	.LCFI25-.LCFI24
	.byte	0xe
	.uleb128 0x10
	.byte	0x4
	.4byte	.LCFI26-.LCFI25
	.byte	0xe
	.uleb128 0x8
	.align	2
.LEFDE40:
.LSFDE42:
	.4byte	.LEFDE42-.LASFDE42
.LASFDE42:
	.4byte	.Lframe0
	.4byte	.LFB21
	.4byte	.LFE21-.LFB21
	.byte	0x4
	.4byte	.LCFI27-.LFB21
	.byte	0xe
	.uleb128 0x20
	.byte	0x83
	.uleb128 0x8
	.byte	0x84
	.uleb128 0x7
	.byte	0x85
	.uleb128 0x6
	.byte	0x86
	.uleb128 0x5
	.byte	0x87
	.uleb128 0x4
	.byte	0x88
	.uleb128 0x3
	.byte	0x89
	.uleb128 0x2
	.byte	0x8e
	.uleb128 0x1
	.align	2
.LEFDE42:
	.text
.Letext0:
	.file 1 "C:/Program Files (x86)/SEGGER/SEGGER Embedded Studio 2.20/samples/SEGGER_RTT.c"
	.section	.debug_info,"",%progbits
.Ldebug_info0:
	.4byte	0x1bf
	.2byte	0x4
	.4byte	.Ldebug_abbrev0
	.byte	0x4
	.uleb128 0x1
	.4byte	.LASF20
	.byte	0x1
	.4byte	.LASF21
	.4byte	.Ldebug_ranges0+0
	.4byte	0
	.uleb128 0x2
	.4byte	.LASF0
	.byte	0x1
	.2byte	0x144
	.4byte	.LFB4
	.4byte	.LFE4-.LFB4
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.4byte	.LASF1
	.byte	0x1
	.2byte	0x104
	.4byte	.LFB2
	.4byte	.LFE2-.LFB2
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x4
	.4byte	.LASF2
	.byte	0x1
	.byte	0xd1
	.4byte	.LFB1
	.4byte	.LFE1-.LFB1
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x3
	.4byte	.LASF3
	.byte	0x1
	.2byte	0x12a
	.4byte	.LFB3
	.4byte	.LFE3-.LFB3
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x4
	.4byte	.LASF4
	.byte	0x1
	.byte	0x9a
	.4byte	.LFB0
	.4byte	.LFE0-.LFB0
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF5
	.byte	0x1
	.2byte	0x16d
	.4byte	.LFB5
	.4byte	.LFE5-.LFB5
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x6
	.4byte	.LASF22
	.byte	0x1
	.2byte	0x1b0
	.byte	0x1
	.uleb128 0x7
	.4byte	0x87
	.4byte	.LFB6
	.4byte	.LFE6-.LFB6
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF6
	.byte	0x1
	.2byte	0x1d9
	.4byte	.LFB7
	.4byte	.LFE7-.LFB7
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF7
	.byte	0x1
	.2byte	0x23d
	.4byte	.LFB8
	.4byte	.LFE8-.LFB8
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF8
	.byte	0x1
	.2byte	0x284
	.4byte	.LFB9
	.4byte	.LFE9-.LFB9
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF9
	.byte	0x1
	.2byte	0x2ab
	.4byte	.LFB10
	.4byte	.LFE10-.LFB10
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x8
	.4byte	.LASF23
	.byte	0x1
	.2byte	0x2c1
	.4byte	.LFB11
	.4byte	.LFE11-.LFB11
	.uleb128 0x1
	.byte	0x9c
	.4byte	0x10e
	.uleb128 0x9
	.4byte	0x87
	.4byte	.LBB4
	.4byte	.LBE4-.LBB4
	.byte	0x1
	.2byte	0x2c5
	.byte	0
	.uleb128 0x5
	.4byte	.LASF10
	.byte	0x1
	.2byte	0x2dd
	.4byte	.LFB12
	.4byte	.LFE12-.LFB12
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF11
	.byte	0x1
	.2byte	0x2f4
	.4byte	.LFB13
	.4byte	.LFE13-.LFB13
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0xa
	.4byte	.LASF12
	.byte	0x1
	.2byte	0x30e
	.4byte	.LFB14
	.4byte	.LFE14-.LFB14
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF13
	.byte	0x1
	.2byte	0x32c
	.4byte	.LFB15
	.4byte	.LFE15-.LFB15
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF14
	.byte	0x1
	.2byte	0x357
	.4byte	.LFB16
	.4byte	.LFE16-.LFB16
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF15
	.byte	0x1
	.2byte	0x37e
	.4byte	.LFB17
	.4byte	.LFE17-.LFB17
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF16
	.byte	0x1
	.2byte	0x39e
	.4byte	.LFB18
	.4byte	.LFE18-.LFB18
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF17
	.byte	0x1
	.2byte	0x3b7
	.4byte	.LFB19
	.4byte	.LFE19-.LFB19
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF18
	.byte	0x1
	.2byte	0x3c6
	.4byte	.LFB20
	.4byte	.LFE20-.LFB20
	.uleb128 0x1
	.byte	0x9c
	.uleb128 0x5
	.4byte	.LASF19
	.byte	0x1
	.2byte	0x3ed
	.4byte	.LFB21
	.4byte	.LFE21-.LFB21
	.uleb128 0x1
	.byte	0x9c
	.byte	0
	.section	.debug_abbrev,"",%progbits
.Ldebug_abbrev0:
	.uleb128 0x1
	.uleb128 0x11
	.byte	0x1
	.uleb128 0x25
	.uleb128 0xe
	.uleb128 0x13
	.uleb128 0xb
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x55
	.uleb128 0x17
	.uleb128 0x11
	.uleb128 0x1
	.byte	0
	.byte	0
	.uleb128 0x2
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x3
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x4
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0xb
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x5
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x6
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x20
	.uleb128 0xb
	.byte	0
	.byte	0
	.uleb128 0x7
	.uleb128 0x2e
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.byte	0
	.byte	0
	.uleb128 0x8
	.uleb128 0x2e
	.byte	0x1
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2116
	.uleb128 0x19
	.uleb128 0x1
	.uleb128 0x13
	.byte	0
	.byte	0
	.uleb128 0x9
	.uleb128 0x1d
	.byte	0
	.uleb128 0x31
	.uleb128 0x13
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x58
	.uleb128 0xb
	.uleb128 0x59
	.uleb128 0x5
	.byte	0
	.byte	0
	.uleb128 0xa
	.uleb128 0x2e
	.byte	0
	.uleb128 0x3f
	.uleb128 0x19
	.uleb128 0x3
	.uleb128 0xe
	.uleb128 0x3a
	.uleb128 0xb
	.uleb128 0x3b
	.uleb128 0x5
	.uleb128 0x11
	.uleb128 0x1
	.uleb128 0x12
	.uleb128 0x6
	.uleb128 0x40
	.uleb128 0x18
	.uleb128 0x2117
	.uleb128 0x19
	.byte	0
	.byte	0
	.byte	0
	.section	.debug_aranges,"",%progbits
	.4byte	0xc4
	.2byte	0x2
	.4byte	.Ldebug_info0
	.byte	0x4
	.byte	0
	.2byte	0
	.2byte	0
	.4byte	.LFB4
	.4byte	.LFE4-.LFB4
	.4byte	.LFB2
	.4byte	.LFE2-.LFB2
	.4byte	.LFB1
	.4byte	.LFE1-.LFB1
	.4byte	.LFB3
	.4byte	.LFE3-.LFB3
	.4byte	.LFB0
	.4byte	.LFE0-.LFB0
	.4byte	.LFB5
	.4byte	.LFE5-.LFB5
	.4byte	.LFB6
	.4byte	.LFE6-.LFB6
	.4byte	.LFB7
	.4byte	.LFE7-.LFB7
	.4byte	.LFB8
	.4byte	.LFE8-.LFB8
	.4byte	.LFB9
	.4byte	.LFE9-.LFB9
	.4byte	.LFB10
	.4byte	.LFE10-.LFB10
	.4byte	.LFB11
	.4byte	.LFE11-.LFB11
	.4byte	.LFB12
	.4byte	.LFE12-.LFB12
	.4byte	.LFB13
	.4byte	.LFE13-.LFB13
	.4byte	.LFB14
	.4byte	.LFE14-.LFB14
	.4byte	.LFB15
	.4byte	.LFE15-.LFB15
	.4byte	.LFB16
	.4byte	.LFE16-.LFB16
	.4byte	.LFB17
	.4byte	.LFE17-.LFB17
	.4byte	.LFB18
	.4byte	.LFE18-.LFB18
	.4byte	.LFB19
	.4byte	.LFE19-.LFB19
	.4byte	.LFB20
	.4byte	.LFE20-.LFB20
	.4byte	.LFB21
	.4byte	.LFE21-.LFB21
	.4byte	0
	.4byte	0
	.section	.debug_ranges,"",%progbits
.Ldebug_ranges0:
	.4byte	.LFB4
	.4byte	.LFE4
	.4byte	.LFB2
	.4byte	.LFE2
	.4byte	.LFB1
	.4byte	.LFE1
	.4byte	.LFB3
	.4byte	.LFE3
	.4byte	.LFB0
	.4byte	.LFE0
	.4byte	.LFB5
	.4byte	.LFE5
	.4byte	.LFB6
	.4byte	.LFE6
	.4byte	.LFB7
	.4byte	.LFE7
	.4byte	.LFB8
	.4byte	.LFE8
	.4byte	.LFB9
	.4byte	.LFE9
	.4byte	.LFB10
	.4byte	.LFE10
	.4byte	.LFB11
	.4byte	.LFE11
	.4byte	.LFB12
	.4byte	.LFE12
	.4byte	.LFB13
	.4byte	.LFE13
	.4byte	.LFB14
	.4byte	.LFE14
	.4byte	.LFB15
	.4byte	.LFE15
	.4byte	.LFB16
	.4byte	.LFE16
	.4byte	.LFB17
	.4byte	.LFE17
	.4byte	.LFB18
	.4byte	.LFE18
	.4byte	.LFB19
	.4byte	.LFE19
	.4byte	.LFB20
	.4byte	.LFE20
	.4byte	.LFB21
	.4byte	.LFE21
	.4byte	0
	.4byte	0
	.section	.debug_line,"",%progbits
.Ldebug_line0:
	.section	.debug_str,"MS",%progbits,1
.LASF19:
	.ascii	"SEGGER_RTT_TerminalOut\000"
.LASF1:
	.ascii	"_WriteNoCheck\000"
.LASF18:
	.ascii	"SEGGER_RTT_SetTerminal\000"
.LASF14:
	.ascii	"SEGGER_RTT_ConfigDownBuffer\000"
.LASF9:
	.ascii	"SEGGER_RTT_WriteString\000"
.LASF8:
	.ascii	"SEGGER_RTT_Write\000"
.LASF22:
	.ascii	"SEGGER_RTT_Read\000"
.LASF17:
	.ascii	"SEGGER_RTT_Init\000"
.LASF6:
	.ascii	"SEGGER_RTT_WriteSkipNoLock\000"
.LASF21:
	.ascii	"C:/Program Files (x86)/SEGGER/SEGGER Embedded Studi"
	.ascii	"o 2.20/samples/SEGGER_RTT.c\000"
.LASF4:
	.ascii	"_DoInit\000"
.LASF7:
	.ascii	"SEGGER_RTT_WriteNoLock\000"
.LASF3:
	.ascii	"_PostTerminalSwitch\000"
.LASF11:
	.ascii	"SEGGER_RTT_HasKey\000"
.LASF23:
	.ascii	"SEGGER_RTT_GetKey\000"
.LASF10:
	.ascii	"SEGGER_RTT_WaitKey\000"
.LASF12:
	.ascii	"SEGGER_RTT_HasData\000"
.LASF13:
	.ascii	"SEGGER_RTT_ConfigUpBuffer\000"
.LASF5:
	.ascii	"SEGGER_RTT_ReadNoLock\000"
.LASF16:
	.ascii	"SEGGER_RTT_SetNameDownBuffer\000"
.LASF0:
	.ascii	"_GetAvailWriteSpace\000"
.LASF15:
	.ascii	"SEGGER_RTT_SetNameUpBuffer\000"
.LASF2:
	.ascii	"_WriteBlocking\000"
.LASF20:
	.ascii	"GNU C 4.9.3 20150529 (release) [ARM/embedded-4_9-br"
	.ascii	"anch revision 227977] -fmessage-length=0 -mtp=soft "
	.ascii	"-mcpu=cortex-m4 -mlittle-endian -mfloat-abi=hard -m"
	.ascii	"fpu=fpv4-sp-d16 -mthumb -g1 -gpubnames -std=gnu99 -"
	.ascii	"O1 -fno-dwarf2-cfi-asm -fno-builtin -ffunction-sect"
	.ascii	"ions -fdata-sections -fshort-enums -fno-common\000"
	.ident	"GCC: (GNU) 4.9.3 20150529 (release) [ARM/embedded-4_9-branch revision 227977]"
